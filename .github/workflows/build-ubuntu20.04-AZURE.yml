name: build-ubuntu-20.04-AZURE
on:
  push:
    #~ branches:
      #~ - dev
      #~ - release-*
      #~ - refs/tags/*
  #~ pull_request:
    #~ branches:
      #~ - '*'  # must quote since "*" is a YAML reserved character; we want a string

env:
  BACKWARDS_COMPATIBILITY_ARRAYS: OFF
  TILEDB_AZURE: ON
  TILEDB_STATIC: OFF
  TILEDB_ARROW_TESTS: ON
  #CXX: g++
  MANYLINUX_IMAGE: 'quay.io/pypa/manylinux2010_x86_64:2021-11-07-28723f3'

jobs:
  build:
    runs-on: ${{ matrix.os }} #ubuntu-20.04
    strategy:
      matrix:
        os:
          - ubuntu-20.04
    if: ${{ startsWith(github.ref , 'refs/tags') != true && startsWith(github.ref , 'build-') != true }}
    timeout-minutes: 90
    name: Build - ${{matrix.os}} - AZURE
    env:
      TILEDB_HOME: ${{ github.workspace }}
      TILEDB_GA_IMAGE_NAME: ${{ matrix.os }}
      CXX: ${{ matrix.cxx }}
      TILEDB_SERIALIZATION: ${{ matrix.tiledb_serialization }}
      ARTIFACT_OS: ${{ matrix.artifact_os }}
      TILEDB_TRY_PNG_INGESTION: ${{ matrix.try_png_ingestion }}
    steps:
    
      - name: 'check /cores 1'
        if: ${{ always() == true   && startsWith(matrix.os, 'macos-') == true }} # only run this job if the build step failed
        run: |
          echo "check /cores 1"
          ls -ld /cores
          ls -la /cores
          nfiles=$(ls /cores | wc -l)
          echo "found $nfiles core files"
          
      - uses: actions/checkout@v2

      - name: 'prep env'
        run: |
          if [[ $TILEDB_GA_IMAGE_NAME == 'ubuntu-20.04' ]] ; then
            echo "CXX=g++" >> "$GITHUB_ENV"
          fi
          if [[ $TILEDB_GA_IMAGE_NAME == 'macos-10.15' ]] ; then
            echo "CXX=clang++" >> "$GITHUB_ENV"
            echo "TILEDB_SERIALIZATION=ON" >> "$GITHUB_ENV"
            echo "ARTIFACT_OS=macOS_azure" >> "$GITHUB_ENV"
          fi
        shell: bash

      - name: 'Print env'
        run: |
          echo "'uname -s' is:"
          echo "uname: " $(uname)
          echo "uname -m: " $(uname -m)
          echo "uname -r:" $(uname -r)
          echo "uname -s: " $(uname -s)
          echo "uname -v: " $(uname -v)
          printenv
        shell: bash

      # Need this for virtualenv and arrow tests if enabled
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv
          pip install pyarrow pybind11 numpy
        shell: bash

      - name: 'Build and test libtiledb'
        id: test
        run: |
          #~ #TBD: REMOVEME for production
          #~ echo "::set-output name=TILEDB_CI_SUCCESS::1" # TBD: make status check pass for this hack step
          #~ exit 0
          
          # Azure sets "SYSTEM=build" for unknown reasonas, which breaks the OpenSSL configure script
          #   - openssl configure uses ENV{SYSTEM} if available:
          #     https://github.com/openssl/openssl/blob/6d745d740d37d680ff696486218b650512bbbbc6/config#L56
          #   - error description:
          #     https://developercommunity.visualstudio.com/content/problem/602584/openssl-build-error-when-using-pipelines.htm
          unset SYSTEM

          # azure run does not treat intermediate failure as error
          # https://github.com/Microsoft/azure-pipelines-yaml/issues/135
          set -e pipefail

          git config --global user.name 'Azure Pipeline'
          git config --global user.email 'no-reply@tiledb.io'

          # Start Azurite - Azure is enabled
          source scripts/install-azurite.sh;
          source scripts/run-azurite.sh;

          bootstrap_args="${bootstrap_args} --enable-azure";
          source $GITHUB_WORKSPACE/scripts/ci/build_libtiledb.sh
          
          # Bypass Catch2 Framework stdout interception with awk on test output
          # make check | awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'
          ./tiledb/test/tiledb_unit -d yes --crash | awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'

          # Kill the running Azurite server
          kill -n 9 $AZURITE_PID

          # - bash: |
          pushd $GITHUB_WORKSPACE/examples/cmake_project
          mkdir build && cd build
          cmake -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/dist .. && make
          ./ExampleExe

          popd
          
          if [[ $TILEDB_TRY_PNG_INGESTION == "ON" ]]; then
            # Build and run the PNG ingestion example.
            # libpng (example dependency)
            sudo apt-get install libpng-dev

            pushd $GITHUB_WORKSPACE/examples/png_ingestion;
            mkdir build && cd build;
            cmake -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/dist .. && make;
            ./tiledb_png $GITHUB_WORKSPACE/doc/source/figures/Scarlet-Macaw-small.png /tmp/pngarray output.png;
            popd;
          fi

          source $GITHUB_WORKSPACE/scripts/ci/build_benchmarks.sh
          
          ulimit -c               # should output 0 if disabled
          ulimit -c unlimited     # Enable core dumps to be captured (must be in same run block)
          ulimit -c               # should output 'unlimited' now
          #echo -e "import resource as res\nprint(res.getrlimit(res.RLIMIT_CORE))\nres.setrlimit(res.RLIMIT_CORE,(res.RLIM_INFINITY,res.RLIM_INFINITY))\nprint(res.getrlimit(res.RLIMIT_CORE))\nimport os \nos.abort()" | python3

      - name: 'Save cores dump stacks if any'
        if: ${{ failure() == true && startsWith(matrix.os, 'macos-') == true }} # only run this job if the build step failed
        run: |
          nfiles=$(ls /cores | wc -l)
          if [[ $nfiles -eq 0 ]]; then
            echo "no core files found"
            exit 0
          fi
          cd $TILEDB_HOME
          ls -la /cores
          for f in $(find /cores -name 'core.*');
            do
              echo "stack trace for $f"
              lldb -c $f --batch -o 'bt all' -o 'quit'
            done;

      - name: 'upload any core artifacts' # https://github.com/actions/upload-artifact#where-does-the-upload-go
        if: ${{ failure() == true && startsWith(matrix.os, 'macos-') == true }} # only run this job if the build step failed
        id: 'macos-coredumps'
        uses: actions/upload-artifact@v2
        with:
          retention-days: 10
          name: "coredumps.${{ github.job }}.${{ matrix.os }}.${{ github.run_number }}.${{github.run_id}}.${{github.run_attempt}}.${{github.action}}"
          if-no-files-found: warn # 'ignore/', 'warn' or 'error' are available, defaults to `warn` 
          path: |
            ${{ github.workspace }}/tdbcores/
            /cores/

      - name: 'Test status check'
        run: |
          # tiledb_unit is configured to set a job-level variable TILEDB_CI_SUCCESS=1
          # following the test run. If this variable is not set, the build should fail.
          # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
          if [[ "${{ steps.test.outputs.TILEDB_CI_SUCCESS }}" -ne 1 ]]; then
            exit 1;
          fi

      - name: "Print log files (failed build only)"
        run: |
          source $GITHUB_WORKSPACE/scripts/ci/print_logs.sh
        if: ${{ failure() }} # only run this job if the build step failed

  manylinux-container-job:
    runs-on: ${{ matrix.os }}
    if: false
    strategy:
      matrix:
        #os: [ubuntu-20.04, macos-10.15]
        #os: [macos-10.15]
        os:
          #~ - ubuntu-20.04
            #~ cxx: g++
            #~ tiledb_serialization: OFF
            #~ artifact_os: macOS_azure
            #~ tiledb_try_png_ingestion: ON
          - macos-10.15
        include:
          - os: 'macos-10.15'
            image: 'quay.io/pypa/manylinux2010_x86_64:2021-11-07-28723f3'
    container: ${{ matrix.os.image }} # TBD: Is this/that right location for image?
    #services:
    #  manylinux:
    #    image: ${{ matrix.os.image }} # TBD: Is this/that right location for image?
    steps:
      - name: 'something to fill til real work coded'
        run: echo running in container? # to be replaced with something more substantial (azure-linux_mac.yml GA quiv?)
