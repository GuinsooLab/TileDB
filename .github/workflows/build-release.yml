name: linux_mac-release

on:
  push:
    branches:
      - release-*
      - dlh/ch10040-azr-osx-lnxto-ga
    
env:
  SUDO: 'sudo'
    
jobs:
  build-release-macos:
    runs-on: ${{ matrix.os }}
    env:
      TILEDB_S3: ON
      TILEDB_AZURE: ON
      TILEDB_GCS: ON
      TILEDB_HDFS: ON
      TILEDB_STATIC: OFF
      TILEDB_SERIALIZATION: ON
      TILEDB_FORCE_BUILD_DEPS: ON
      MACOSX_DEPLOYMENT_TARGET: 10.14
      SUDO: 'sudo'
    strategy:
      matrix:
        #https://github.community/t/create-matrix-with-multiple-os-and-env-for-each-one/16895/5
        include:
          - os: macos-10.15
            TILEDB_AZURE: ON
            TILEDB_SERIALIZATION: ON
            CXX: clang++
            ARTIFACT_OS: macOS_azure
          - os: macos-10.15
            CXX: clang++
            ARTIFACT_OS: 'macos'
            ARTIFACT_ARCH: 'arm64'
            TILEDB_GCS: OFF
            TILEDB_WERROR: OFF
            CMAKE_OSX_ARCHITECTURES: "arm64"
            MACOSX_DEPLOYMENT_TARGET: 11
    steps:
      - uses: actions/checkout@v1

      - uses: ./.github/actions/linux_mac-release

  configure-for-manylinux-container:
    runs-on: ubuntu-20.04
    outputs:
      uid_gid: ${{ steps.get-user.outputs.uid_gid }}
    steps:
      - id: get-user
        run: echo "::set-output name=uid_gid::$(id -u):$(id -g)"
          
  build-release-manylinux:
    needs: configure-for-manylinux-container
    runs-on: ubuntu-20.04
    env:
      CXX: g++
      CFLAGS: "-lrt"
      CXXFLAGS: "-lrt"
      ARTIFACT_OS: 'linux'
      ARTIFACT_ARCH: 'x86_64'
      SUDO: ''
    container: #${{ matrix.os.image }} # TBD: Is this/that right location for image?
      image: 'quay.io/pypa/manylinux2010_x86_64:2021-11-07-28723f3'      
      #options: "--entrypoint /bin/bash"
      #options: --user ${{ needs.configure-for-manylinux-container.outputs.uid_gid }}
    steps:
      - name: diagnosing
        shell: bash
        run: |
          set -x
          echo $HOME
          whoami
          pwd
          mount
          ls -l
          find . -name '*'

      #~ - name: 'are we in container?'
        #~ shell: bash
        #~ run: |
          #~ if [[ $(ls -l /etc/system-release) ]]; then
            #~ echo "found system-release"
            #~ cat /etc/system-release
          #~ else
            #~ echo "did not find system-release"
          #~ fi
          #~ exit 45

      - uses: actions/checkout@v1

      - uses: ./.github/actions/linux_mac-release

  build-release-manylinux2:
    needs: build-release-manylinux
    runs-on: ubuntu-20.04
    steps:
      - name: diagnosing
        shell: bash
        run: |
          whoami
          echo $HOME
          pwd
          ls -l -d */
          sudo find . -name '*.tar.gz'
          
    - name: 'ArchiveFiles@2' # https://github.com/actions/upload-artifact#where-does-the-upload-go
      #if: ${{ failure() == true && startsWith(runner.name, 'macos-') == true }} # only run this job if the build step failed
      #uses: actions/upload-artifact@v2
      uses: actions/upload-artifact@v1
      with:
        # @v1 does not recognize 'retention-days', 'if-no-files-found', path enhancments, prob more
        #retention-days: 10
        #name: "${{ runner.name }}.coredumps.${{ github.job }}.${{ github.run_number }}.${{github.run_id}}.${{github.run_attempt}}"
        #name: tiledb-$(ARTIFACT_OS)-build-dir-$(ARTIFACT_EXTRAS).tar.gz
        name: tiledb-${{ env.ARTIFACT_OS }}-build-dir-${{ env.ARTIFACT_EXTRAS }}.${{github.job}}.tar.gz
        #if-no-files-found: warn # 'ignore/', 'warn' or 'error' are available, defaults to `warn`
        #${{ env.GITHUB_WORKSPACE }}/
        #!${{ env.GITHUB_WORKSPACE }}/build/
        #${{ env.GITHUB_WORKSPACE }}/../tiledb-${{ env.ARTIFACT_OS }}-build-dir-${{ env.ARTIFACT_EXTRAS }}.tar.gz
        #${{ env.TDB_SOURCE_ARCHIVE_PATH }}
        path: |
          CMakeLists.txt

    - name: Git Hash 7-digit
      shell: bash
      env: 
        sourceVersion: ${{ env.GITHUB_SHA }}
      run: |
        echo $sourceVersion
        commitHash=${sourceVersion:0:7}
        echo $commitHash
        #echo "##vso[task.setvariable variable=commitHash]$commitHash" ## Set variable for using in other tasks.
        echo "::set-output name=commitHash::$commitHash" # TBD: make status check pass for this hack step
        
    - name: 'ArchiveFiles@2' # https://github.com/actions/upload-artifact#where-does-the-upload-go
      # @v1 does not recognize 'retention-days', 'if-no-files-found', path enhancments, prob more
      #if: ${{ failure() == true && startsWith(runner.name, 'macos-') == true }} # only run this job if the build step failed
      #uses: actions/upload-artifact@v2
      uses: actions/upload-artifact@v1
      with:
        #retention-days: 10
        #name: "${{ runner.name }}.coredumps.${{ github.job }}.${{ github.run_number }}.${{github.run_id}}.${{github.run_attempt}}"
        #name: tiledb-$(ARTIFACT_OS)-build-dir-$(ARTIFACT_EXTRAS).tar.gz
        name: tiledb-${{ env.ARTIFACT_OS }}-build-dir-${{ env.ARTIFACT_EXTRAS }}.${{github.job}}.tar.gz
        #if-no-files-found: warn # 'ignore/', 'warn' or 'error' are available, defaults to `warn`
        #${{ env.GITHUB_WORKSPACE }}/build/
        #${{ env.GITHUB_WORKSPACE }}/../tiledb-${{ env.ARTIFACT_OS }}-build-dir-${{ env.ARTIFACT_EXTRAS }}.tar.gz
        #${{ env.TDB_BINARY_ARCHIVE_PATH }}
        path: |
          CMakeLists.txt

